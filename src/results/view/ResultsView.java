package results.view;

// required java libraries
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import results.controller.ResultsController;
import results.model.Result;
import results.model.Update;

/**
 *
 * @author VBlue
 */
public class ResultsView extends javax.swing.JFrame implements IView, Observer {
    
    // result controller object.
    ResultsController controller;
    
    // required variables to handle events.
    String studentIDString = "";
    int t1 = 0;
    int t2 = 0;
    int totalMarks = 0;
    String gradeValue = null;
    int assignment1Marks = 0;
    int assignment2Marks = 0;
    int examMarks = 0;

    /**
     * Creates new form ResultsView
     */
    // no-argument constructor
    public ResultsView() {
        initComponents();
    }
    
    // constructor with parameter
    public ResultsView(ResultsController rc) {

        super("Results System");

        // set controller
        controller = rc;

        // GUI components
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sid = new javax.swing.JLabel();
        studentID = new javax.swing.JTextField();
        ass1 = new javax.swing.JLabel();
        assignment1 = new javax.swing.JTextField();
        ass2 = new javax.swing.JLabel();
        assignment2 = new javax.swing.JTextField();
        exam = new javax.swing.JLabel();
        examination = new javax.swing.JTextField();
        total = new javax.swing.JLabel();
        total1 = new javax.swing.JTextField();
        total2 = new javax.swing.JTextField();
        grd = new javax.swing.JLabel();
        grade = new javax.swing.JTextField();
        queries = new javax.swing.JLabel();
        allStudent = new javax.swing.JButton();
        specifiedStudent = new javax.swing.JButton();
        rangedStudents = new javax.swing.JButton();
        updateExamAndTotal = new javax.swing.JButton();
        updateGrades = new javax.swing.JButton();
        messages = new javax.swing.JLabel();
        messageArea = new javax.swing.JScrollPane();
        messageText = new javax.swing.JTextArea();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sid.setText("Student ID");

        ass1.setText("Assignment 1");

        ass2.setText("Assignment 2");

        exam.setText("Examination");

        total.setText("Total");

        total1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                total1ActionPerformed(evt);
            }
        });

        grd.setText("Grade");

        queries.setText("Queries");

        allStudent.setText("All Students");
        allStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allStudentActionPerformed(evt);
            }
        });

        specifiedStudent.setText("Specified Student");
        specifiedStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specifiedStudentActionPerformed(evt);
            }
        });

        rangedStudents.setText("All Students in Range");
        rangedStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangedStudentsActionPerformed(evt);
            }
        });

        updateExamAndTotal.setText("Update Exam and Total");
        updateExamAndTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExamAndTotalActionPerformed(evt);
            }
        });

        updateGrades.setText("Update Grades");
        updateGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateGradesActionPerformed(evt);
            }
        });

        messages.setText("Messages");

        messageText.setColumns(20);
        messageText.setRows(5);
        messageArea.setViewportView(messageText);

        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.setToolTipText("");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(previous))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(queries)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sid)
                                        .addComponent(ass1)
                                        .addComponent(ass2)
                                        .addComponent(exam)
                                        .addComponent(total)
                                        .addComponent(grd)))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(studentID)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(total1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                                .addComponent(examination, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(assignment2, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(assignment1, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGap(12, 12, 12)
                                            .addComponent(total2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                                    .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(allStudent)
                            .addComponent(specifiedStudent)
                            .addComponent(rangedStudents)
                            .addComponent(updateExamAndTotal)
                            .addComponent(updateGrades))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(messages)
                                .addComponent(messageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(next, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clear, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(messages)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sid)
                            .addComponent(studentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ass1)
                            .addComponent(assignment1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ass2)
                            .addComponent(assignment2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exam)
                            .addComponent(examination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(total1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(total2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grd)
                            .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(messageArea))
                .addGap(38, 38, 38)
                .addComponent(queries)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allStudent)
                    .addComponent(previous))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specifiedStudent)
                    .addComponent(next))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rangedStudents)
                    .addComponent(clear))
                .addGap(18, 18, 18)
                .addComponent(updateExamAndTotal)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateGrades)
                    .addComponent(exit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void total1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_total1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_total1ActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        controller.close(); // closing the model
        System.exit(0); // closing the gui and exiting the system.
    }//GEN-LAST:event_exitActionPerformed
    
    // it handles related events when All Student button is clicked.
    private void allStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allStudentActionPerformed
        controller.resultsForAllStudents(); // getting required results.
    }//GEN-LAST:event_allStudentActionPerformed
    
    // it handles related events when Specific student button is clicked.
    private void specifiedStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specifiedStudentActionPerformed
        studentIDString = studentID.getText();
        
        // to check if the required fields are empty or not
        if (studentIDString.equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Student ID is empty, please enter",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            controller.resultForSpecificStudent(studentIDString); // getting required results.
        }
    }//GEN-LAST:event_specifiedStudentActionPerformed
    
    // it handles related events when All Student in Range button is clicked.
    private void rangedStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangedStudentsActionPerformed
        t1 = Integer.parseInt(total1.getText());
        t2 = Integer.parseInt(total2.getText());
        
        // to check if the required fields are empty or not
        if (t1 == 0) {
            JOptionPane.showMessageDialog(null, "Start value of range is missing", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (t2 == 0) {
            JOptionPane.showMessageDialog(null, "End value of range is missing", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            controller.resultsForStudentsInRange(t1, t2); // getting required results.
        }
    }//GEN-LAST:event_rangedStudentsActionPerformed
    
    // it handles related events when Update Exam and Total button is clicked.
    private void updateExamAndTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExamAndTotalActionPerformed
        studentIDString = studentID.getText();
        examMarks = Integer.parseInt(examination.getText());
        totalMarks = Integer.parseInt(total1.getText());
        
        // to check if the required fields are empty or not
        if (studentIDString.equals("")) {
            JOptionPane.showMessageDialog(null, "Student ID is empty, please enter", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (examMarks == 0) {
            JOptionPane.showMessageDialog(null, "Examination mark is missing", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (totalMarks == 0){
            JOptionPane.showMessageDialog(null, "Total mark is missing", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            controller.updateExamAndTotal(studentIDString, examMarks, totalMarks); // getting required results.
        }
    }//GEN-LAST:event_updateExamAndTotalActionPerformed
    
    // it handles related events when Update grade button is clicked.
    private void updateGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateGradesActionPerformed
        controller.updateGrade(); // getting required results.
    }//GEN-LAST:event_updateGradesActionPerformed
    
    // handles events when previousButton is clicked
    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        setBrowsing(false);
        controller.previous(); // setting the previous browsing mode.
    }//GEN-LAST:event_previousActionPerformed
    
    // handles events when nextButton is clicked.
    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        setBrowsing(false);
        controller.next(); // setting the forward browsing mode.
    }//GEN-LAST:event_nextActionPerformed
    
    // handles events when clearButton is clicked
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        setBrowsing(false);
        
        // clearing all the textfields.
        assignment1.setText("");
        assignment2.setText("");
        examination.setText("");
        grade.setText("");
        messageText.setText("");
        studentID.setText("");
        total1.setText("");
        total2.setText("");
    }//GEN-LAST:event_clearActionPerformed


    // GUI creation
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allStudent;
    private javax.swing.JLabel ass1;
    private javax.swing.JLabel ass2;
    private javax.swing.JTextField assignment1;
    private javax.swing.JTextField assignment2;
    private javax.swing.JButton clear;
    private javax.swing.JLabel exam;
    private javax.swing.JTextField examination;
    private javax.swing.JButton exit;
    private javax.swing.JTextField grade;
    private javax.swing.JLabel grd;
    private javax.swing.JScrollPane messageArea;
    private javax.swing.JTextArea messageText;
    private javax.swing.JLabel messages;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JLabel queries;
    private javax.swing.JButton rangedStudents;
    private javax.swing.JLabel sid;
    private javax.swing.JButton specifiedStudent;
    private javax.swing.JTextField studentID;
    private javax.swing.JLabel total;
    private javax.swing.JTextField total1;
    private javax.swing.JTextField total2;
    private javax.swing.JButton updateExamAndTotal;
    private javax.swing.JButton updateGrades;
    // End of variables declaration//GEN-END:variables
    
    //Method to enalbe or disable next or previous button
    @Override
    public void setBrowsing(boolean flag) {
        next.setEnabled(flag);
        previous.setEnabled(flag);
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    // Observer interface implementation
    // Method to update Result object and display the result record
    @Override
    public void update(Observable o, Object arg) {
        Update u;
        u = (Update) arg;
        if (u != null) {
            setBrowsing(false);
            String s = u.getMessage();
            displayMessage(s);
            Result r = u.getResult();
            displayRecord(r);
        }
    }
    
    //Method to display message in output textArea
    @Override
    public void displayMessage(String s) {
        messageText.setText(s);
    }
    
    // Method to diplay student result record in input textField
    @Override
    public void displayRecord(Result r) {
        setBrowsing(true);
        
        if (r == null) {
            assignment1.setText("");
            assignment2.setText("");
            examination.setText("");
            grade.setText("");
            studentID.setText("");
            total1.setText("");
            total2.setText("");
        } else {
            assignment1.setText(String.valueOf(r.getAssignment1()));
            assignment2.setText(String.valueOf(r.getAssignment2()));
            examination.setText(String.valueOf(r.getExam()));
            grade.setText(r.getGrade());
            studentID.setText(r.getStudentID());
            total1.setText(String.valueOf(r.getTotal()));
            total2.setText("");
        }
    }
}
